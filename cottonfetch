#!/bin/env bash

show_help() {
    echo
    echo -e "\e[1mcottonfetch 1.10\e[0m"
    echo "created by servalx4"
    echo -e "\e[3m\"all hail the holy cult of cotton!!\"\e[0m"
# sometimes, i wonder if farcotton still remembers this program
    echo
    echo "usage:"
    echo "  cottonfetch             show system info"
    echo "  cottonfetch --help      show this message"
    echo
    echo "thank you for using cottonfetch <3"
    echo
    echo "special thanks:"
    echo "  hikari (discord) ‚Äî font fixes"
    echo "  immaculatekatz (github) ‚Äî distro detection help"
    echo
}

# flags

[[ $* == *--help* ]] && show_help && exit 0

no_shorten=false
for arg in "$@"; do
    [[ $arg == "-ns" || $arg == "--no-shorten" ]] && no_shorten=true
done

# colors
declare -A C=(
    [nc]='\e[0m' [blk]='\e[0;30m' [dgr]='\e[1;30m'
    [red]='\e[0;31m' [lrd]='\e[1;31m'
    [grn]='\e[0;32m' [lgr]='\e[1;32m'
    [ylw]='\e[1;33m' [org]='\e[0;33m'
    [blu]='\e[0;34m' [lbl]='\e[1;34m'
    [prp]='\e[0;35m' [lpr]='\e[1;35m'
    [cyn]='\e[0;36m' [lcy]='\e[1;36m'
    [wht]='\e[1;37m' [lgy]='\e[0;37m'
)

# gather basics
kernelname=$(uname -s)
kernel=$(uname -r)
architecture=$(uname -m)
hostname=$(uname -n)
os=$(uname -o)
user=$(whoami)

# distro detection
if [[ -d /bedrock ]]; then
    distro="Bedrock"
elif [[ -f /etc/GoboLinuxVersion ]]; then
    distro="GoboLinux"
elif [[ -f /etc/os-release ]]; then
    . /etc/os-release
    distro=$NAME
elif command -v lsb_release &>/dev/null; then
    distro=$(lsb_release -si)
elif [[ -f /etc/lsb-release ]]; then
    . /etc/lsb-release
    distro=$DISTRIB_ID
elif [[ -f /etc/debian_version ]]; then
    distro="Debian GNU/Linux"
else
    distro=$kernelname
fi

# kernel shorten
if ! $no_shorten && [[ ${#kernel} -gt 15 ]]; then
    kernel="${kernel:0:15}..."
fi

# memory
read mem_total_kb mem_free_kb swap_total_kb swap_free_kb < <(
    awk '/MemTotal:/{t=$2} /MemFree:/{f=$2} /SwapTotal:/{st=$2} /SwapFree:/{sf=$2} END{print t,f,st,sf}' /proc/meminfo
)
mem_total=$((mem_total_kb / 1024))
mem_free=$((mem_free_kb / 1024))
mem_used=$((mem_total - mem_free))
swap_total=$((swap_total_kb / 1024))
swap_used=$((swap_total - swap_free_kb / 1024))

# disk
read disk_total disk_used < <(df -h --output=size,used / | tail -1)

# cpu
cpu=$(awk -F: '/model name|Hardware/ {print $2; exit}' /proc/cpuinfo | xargs)
[[ -z $cpu ]] && cpu="unknown"

# gpu
if command -v glxinfo &>/dev/null; then
    gpu=$(glxinfo 2>/dev/null | awk -F: '/Device/ {print $2; exit}' | xargs)
else
    gpu=$(lspci 2>/dev/null | awk -F: '/VGA/ {print $3; exit}' | xargs)
fi
[[ -z $gpu ]] && gpu="unknown"

if ! $no_shorten && [[ ${#gpu} -gt 40 ]]; then
    gpu="${gpu:0:40}..."
fi

# resolution detection
if command -v xrandr &>/dev/null; then
    res=$(xrandr | awk '/ connected/{print $4; exit}' | cut -d+ -f1)
fi

if [[ -z $res ]]; then
    if command -v wlr-randr &>/dev/null; then
        res=$(wlr-randr | awk '/\*/{print $1; exit}')
    elif command -v swaymsg &>/dev/null; then
        res=$(swaymsg -t get_outputs | grep -oP '"width":\K\d+|"height":\K\d+' | paste -sdx)
    fi
fi
if [[ -z $res ]]; then
    for card in /sys/class/drm/*-*/; do
        [[ -f "$card/status" && $(<"$card/status") == "connected" ]] && res=$(head -n1 "$card/modes")
    done
fi
[[ -z $res ]] && res="unknown"

# package count (slow)
get_pkg_count() {
    if command -v dpkg-query &>/dev/null; then
        dpkg-query -f '${binary:Package}\n' -W | wc -l
    elif command -v pacman &>/dev/null; then
        pacman -Q | wc -l
    elif command -v rpm &>/dev/null; then
        rpm -qa | wc -l
    elif command -v xbps-query &>/dev/null; then
        xbps-query -l | wc -l
    elif command -v equery &>/dev/null; then
        equery -I | wc -l
    elif command -v nix-store &>/dev/null; then
        nix-store --query --requisites /run/current-system/ | wc -l
    elif command -v apk &>/dev/null; then
        apk list --installed | wc -l
    else
        echo "unknown"
    fi
}
pkgs=$(get_pkg_count)

# distro colors/icons
case $distro in
    'NixOS') dcol=${C[lbl]} acol=${C[lcy]} icon='Ôåì' ;;
    'Debian GNU/Linux') dcol=${C[red]} acol=${C[lgy]} icon='ÔåÜ' ;;
    'Arch Linux') dcol=${C[cyn]} acol=${C[lcy]} icon='ÔåÉ' ;;
    'Gentoo') dcol=${C[lgr]} acol=${C[lpr]} icon='Ôåç' ;;
    'EndeavourOS') dcol=${C[lpr]} acol=${C[prp]} icon='Ôå¢' ;;
    'Bedrock') dcol=${C[lgy]} acol=${C[blk]} icon='b' ;;
    'Android') dcol=${C[grn]} acol=${C[grn]} icon='ÔÖª' ;;
    'Ubuntu') dcol=${C[org]} acol=${C[ylw]} icon='Ôåõ' ;;
    'Fedora Linux') dcol=${C[lbl]} acol=${C[wht]} icon='Ôåä' ;;
    'KaOS') dcol=${C[lbl]} acol=${C[blu]} icon='KÀ≥' ;;
    'Oreon') dcol=${C[wht]} acol=${C[lgr]} icon='◊°' ;; # you should totally use this distro!! https://discord.gg/2zQHkMkQNM
    'Void') dcol=${C[lgr]} acol=${C[wht]} icon='ÔåÆ' ;;
    'Solus') dcol=${C[lgy]} acol=${C[blu]} icon='Ôå≠' ;; # underrated
    'Red Hat'*) dcol=${C[red]} acol=${C[lrd]} icon='ÓΩù' ;;
    'openSUSE') dcol=${C[grn]} acol=${C[lgr]} icon='ÓΩ≠' ;;
    'FreeBSD') dcol=${C[red]} acol=${C[blk]} icon='Ôäè' ;; # cottonfetch doesn't work on it, but why not add it anyway?
    'Chimera') dcol=${C[lrd]} acol=${C[lpr]} icon='ú¥´' ;;
    'Slackware') dcol=${C[blu]} acol=${C[lgr]} icon='Ôåò' ;;
    'SteamOS') dcol=${C[lbl]} acol=${C[lpr]} icon='‚Ä¢)' ;;
    'Guix'*) dcol=${C[ylw]} acol=${C[org]} icon='Ôå•' ;;
    'Manjaro'*) dcol=${C[lgr]} acol=${C[grn]} icon='Ôåí' ;;
    'Alpine Linux') dcol=${C[blu]} acol=${C[lbl]} icon='ÔåÄ' ;; # my beloved
    'TinyCore') dcol=${C[blck]} acol=${C[lgy]} icon='‚äò ' ;;
    'Gobo'*) dcol=${C[cyn]} acol=${C[lbl]} icon='Ôçî' ;;
    'Artix'*) dcol=${C[lbl]} acol=${C[lcy]} icon='Ôåü' ;;
    'Fatdog64'*) dcol=${C[wht]} acol=${C[ylw]} icon='Û∞©É' ;;
    'Linux Mint') dcol=${C[lgr]} acol=${C[wht]} icon='Ôåé' ;;
    'Deepin') dcol=${C[lbl]} acol=${C[wht]} icon='Ôå°' ;;
    'NuTyX') dcol=${C[wht]} acol=${C[blk]} icon='Óª∏' ;;
    *'Asahi'*) dcol=${C[lrd]} acol=${C[blk]} icon='Ó∫ò' ;;
    'Arco'*) dcol=${C[lbl]} acol=${C[lpr]} icon='ÔçÜ' ;;
    'Archcraft') dcol=${C[lcy]} acol=${C[lgr]} icon='ÔçÖ' ;;
    'Archbang') dcol=${C[cyn]} acol=${C[blu]} icon='ÔåÉÕÖ' ;;
    'MidOS') dcol=${C[blk]} acol=${C[wht]} icon='<|>' ;;
    'Zorin'*) dcol=${C[blu]} acol=${C[wht]} icon='ÔåØ' ;;
    'CachyOS'*) dcol=${C[cya]} acol=${C[lign]} icon='C‚∏™' ;;
    'elementary OS') dcol=${C[wht]} acol=${C[lgy]} icon='Ôåâ' ;;
    'Pickle') dcol=${C[grn]} acol=${C[ylw]} icon='0' ;;
    'PikaOS') dcol=${C[ylw]} acol=${C[wht]} icon='Û±óÜ' ;;
    *) dcol=${C[lgy]} acol=${C[wht]} icon='?' ;;
esac

# ascii logo, feel free to change
ascii=(
"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚£Ñ‚†Ä‚£Ä‚°†‚†Ñ‚†Ä‚†Ä"
"‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†∑‚£∂‚£å‚°á‚¢ø‚£ß‚°∏‚†Ä‚†Ä"
"‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£Ñ‚†Ä‚°ì‚†°‚°Ä‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä"
"‚†Ä‚†Ä‚†Ä‚†ª‚£ø‚£∂‚°Ü‚¢Å‚†à‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä"
"‚†Ä‚†Ä‚¢†‚£Ä‚°Ä‚¢ß‚°Ñ‚†Å‚¢∞‚£∑‚°ä‚†Ä‚†Ä‚†Ä‚†Ä"
"‚†Ä‚†Ä‚†à‚†õ‚†ø‚†∞‚†Ä‚†•‚†Ä‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä"
"‚†Ä‚†Ä‚£∂‚°Ü‚¢ê‚†ì‚¢∂‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä"
"‚†Ä‚†Ä‚†Ä‚†â‚†∏‚†Ä‚†Ä‚†°‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä" # i'd advise you make every line have the same length, unless you know what you're doing
)
empty="‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ" # and make sure this variable is as wide as the ascii logo as well
sep='‚Ä∫' # separator, feel free to change

# info, feel free to change
#
# available options:
#
# ${dcol} - distro colour
# ${acol} - accent colour
# ${C[nc]} - no colour
# ${icon} - distro icon
# ${sep} - separator
#
# ${hostname}
# ${user}
# ${kernel}
# ${kernelname}
# ${os}
# ${pkgs}
#
# ${mem_used}
# ${mem_total
# ${swap_used}
# ${swap_total}
# ${cpu}
# ${gpu}
# ${disk_used}
# ${disk_total}
# ${architecture}
#
# ${res}
# ${XDG_CURRENT_DESKTOP} - current desktop environment/window manager
# ${XDG_SESSION_TYPE} - display server, hopefully
info=(
'echo'
'echo -e "${dcol}${user}${C[nc]}@${acol}${hostname}"'
'echo -e "‚îå ${acol}os${C[nc]}"'
'echo -e "type ${sep} ${dcol}${icon} ${distro}${C[nc]}"'
'echo -e "krnl ${sep} ${dcol}${os} ${C[nc]}${kernel}${C[nc]}"'
'echo -e "arch ${sep} ${dcol}${architecture}${C[nc]}"'
'echo -e "pkgs ${sep} ${dcol}${pkgs}${C[nc]}"'
'echo'
'echo -e "‚îå ${acol}pc${C[nc]}"'
'echo -e "ram ${sep} ${dcol}${mem_used}/${mem_total}MB${C[nc]}, ${swap_used}/${swap_total}MB swap"'
'echo -e "cpu ${sep} ${dcol}${cpu}"${C[nc]}'
'echo -e "gpu ${sep} ${dcol}${gpu}"${C[nc]}'
'echo -e "dsk ${sep} ${dcol}${disk_used}/${disk_total}"${C[nc]}'
'echo'
'echo -e "‚îå ${acol}display${C[nc]}"${C[nc]}'
'[[ $res ]] && echo -e "res    ${sep} ${dcol}${res}"${C[nc]}'
'[[ $XDG_CURRENT_DESKTOP ]] && echo -e "de/wm  ${sep} ${dcol}${XDG_CURRENT_DESKTOP}"${C[nc]}'
'[[ $XDG_SESSION_TYPE ]] && echo -e "server ${sep} ${dcol}${XDG_SESSION_TYPE}"${C[nc]}'
'echo'
)

# don't modify this!
asciilen="${#ascii[@]}"
infolen="${#info[@]}"

diff=$(( asciilen - infolen ))
(( diff < 0 )) && diff=0

for (( i = 0; i < asciilen + 1 || i < infolen; i++ )); do
    if (( i == 0 )); then
        echo -en "$empty"
    elif (( i - 1 < asciilen )); then
        echo -en "${dcol}${ascii[i-1]}${C[nc]}"
    else
        echo -en "$empty"
    fi

    if (( i >= asciilen && diff > 0 )); then
        for (( j = 0; j < diff; j++ )); do
            echo -en "$empty"
        done
    fi

    if (( i < infolen )); then
        eval "${info[i]}"
    else
        echo ""
    fi
done

# Fish support
#                           .
#                           A       ;
#                 |   ,--,-/ \---,-/|  ,
#                _|\,'. /|      /|   `/|-.
#            \`.'    /|      ,            `;.
#           ,'\   A     A         A   A _ /| `.;
#         ,/  _              A       _  / _   /|  ;
#        /\  / \   ,  ,           A  /    /     `/|
#       /_| | _ \         ,     ,             ,/  \
#      // | |/ `.\  ,-      ,       ,   ,/ ,/      \/
#      / @| |@  / /'   \  \      ,              >  /|    ,--.
#     |\_/   \_/ /      |  |           ,  ,/        \  ./' __:..
#     |  __ __  |       |  | .--.  ,         >  >   |-'   /     `
#   ,/| /  '  \ |       |  |     \      ,           |    /
#  /  |<--.__,->|       |  | .    `.        >  >    /   (
# /_,' \\  ^  /  \     /  /   `.    >--            /^\   |
#       \\___/    \   /  /      \__'     \   \   \/   \  |
#        `.   |/          ,  ,                  /`\    \  )
#          \  '  |/    ,       V    \          /        `-\
#           `|/  '  V      V           \    \.'            \_
#            '`-.       V       V        \./'\
#                `|/-.      \ /   \ /,---`\         kat
#                 /   `._____V_____V'
#                            '     '
